//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MainFeatures/Hsinpa/Character/InputSystem/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Hsinpa.Input
{
    public partial class @PlayerAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""UIControl"",
            ""id"": ""6a3f8d13-d438-4499-8de4-3e3c043fd2b3"",
            ""actions"": [
                {
                    ""name"": ""Addressable_UI"",
                    ""type"": ""Button"",
                    ""id"": ""5f6fc268-81de-4d79-99de-497c5eefe520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mask_UI"",
                    ""type"": ""Button"",
                    ""id"": ""53555dd9-3095-4c68-ade3-3adab337d63c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b67bb3a-2a65-4099-b31c-debf97d87150"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Addressable_UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da6a970f-6be4-4523-b35b-a5fa5e5ba562"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mask_UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UIControl
            m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
            m_UIControl_Addressable_UI = m_UIControl.FindAction("Addressable_UI", throwIfNotFound: true);
            m_UIControl_Mask_UI = m_UIControl.FindAction("Mask_UI", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UIControl
        private readonly InputActionMap m_UIControl;
        private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
        private readonly InputAction m_UIControl_Addressable_UI;
        private readonly InputAction m_UIControl_Mask_UI;
        public struct UIControlActions
        {
            private @PlayerAction m_Wrapper;
            public UIControlActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Addressable_UI => m_Wrapper.m_UIControl_Addressable_UI;
            public InputAction @Mask_UI => m_Wrapper.m_UIControl_Mask_UI;
            public InputActionMap Get() { return m_Wrapper.m_UIControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
            public void AddCallbacks(IUIControlActions instance)
            {
                if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
                @Addressable_UI.started += instance.OnAddressable_UI;
                @Addressable_UI.performed += instance.OnAddressable_UI;
                @Addressable_UI.canceled += instance.OnAddressable_UI;
                @Mask_UI.started += instance.OnMask_UI;
                @Mask_UI.performed += instance.OnMask_UI;
                @Mask_UI.canceled += instance.OnMask_UI;
            }

            private void UnregisterCallbacks(IUIControlActions instance)
            {
                @Addressable_UI.started -= instance.OnAddressable_UI;
                @Addressable_UI.performed -= instance.OnAddressable_UI;
                @Addressable_UI.canceled -= instance.OnAddressable_UI;
                @Mask_UI.started -= instance.OnMask_UI;
                @Mask_UI.performed -= instance.OnMask_UI;
                @Mask_UI.canceled -= instance.OnMask_UI;
            }

            public void RemoveCallbacks(IUIControlActions instance)
            {
                if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIControlActions instance)
            {
                foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIControlActions @UIControl => new UIControlActions(this);
        public interface IUIControlActions
        {
            void OnAddressable_UI(InputAction.CallbackContext context);
            void OnMask_UI(InputAction.CallbackContext context);
        }
    }
}
